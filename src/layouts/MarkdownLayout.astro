---
import PageLayout from '~/layouts/PageLayout.astro';
import { Icon } from 'astro-icon/components';
import type { CollectionEntry } from 'astro:content';

// Data from the markdown frontmater
// same as a blog post except for the category
export interface Props {
  frontmatter: {
    title: string;
    description?: string;
    author?: string;
    pubDatetime?: Date;
    modDatetime?: Date;
    ogImage?: string;
    canonicalUrl?: string;
  };
}

const { frontmatter } = Astro.props;

// Extract the post data
const { title, description, author, pubDatetime, modDatetime, ogImage, canonicalUrl } = frontmatter;

// Create metadata object to pass to PageLayout
const metadata = {
  title: title,
  description: description,
  author: author,
  pubDatetime: pubDatetime,
  modDatetime: modDatetime,
  ogImagePath: ogImage,
  canonicalUrl: canonicalUrl,
};
// Format dates
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
};
---

<PageLayout metadata={metadata}>
  <div class="relative">
    <!-- Table of Contents - Only visible on xl screens and above (1340px+) -->
    <div
      id="toc"
      data-max-level="0"
      class="hidden fixed left-3 top-1/2 transform -translate-y-1/2 w-64 max-h-[70vh] overflow-y-auto p-4 rounded-lg backdrop-blur-sm shadow-md transition-opacity duration-300"
    >
      <div id="toc-content" class="text-sm space-y-2">
        <!-- TOC items will be inserted here by JavaScript -->
      </div>
    </div>

    <!-- Main content -->
    <div class="max-w-3xl mx-auto px-4 py-16 mb-8">
      <h1 class="text-3xl font-bold">
        {title}
        <slot name="title" />
      </h1>

      {
        pubDatetime && (
          <div class="flex flex-wrap gap-4 mt-3 text-sm text-gray-600 mb-8">
            <div class="flex items-center">
              <Icon name="tabler:calendar" class="w-5 h-5 mr-1" />
              <span>{modDatetime ? formatDate(modDatetime) : formatDate(pubDatetime)}</span>
            </div>
          </div>
        )
      }

      <div
        class="prose max-w-none
      prose-h1:font-bold prose-h1:text-xl
      prose-a:text-blue-700
      prose-p:text-justify prose-img:rounded-xl
      prose-headings:underline"
      >
        <slot />
      </div>
    </div>
  </div>
</PageLayout>

<script is:inline>
  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll('h2, h3, h4, h5, h6'));
    for (let heading of headings) {
      // Normalize heading ID regardless of whether it already exists
      // Create slug from heading text
      const slug = heading.textContent
        .toLowerCase()
        // Normalize accents and special characters (convert ñ to n, é to e, etc.)
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '')
        .replace(/[^\w\s-]/g, '') // Remove remaining special chars
        .replace(/\s+/g, '-') // Replace spaces with hyphens
        .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
        .trim();

      // Always set the ID to ensure it's normalized
      heading.id = slug;

      heading.classList.add('group');
      let link = document.createElement('a');
      link.innerText = '#';
      link.className = 'heading-link hidden group-hover:inline-block ml-2';
      link.href = '#' + heading.id;
      link.ariaHidden = 'true';

      // Prevent default behavior and use our custom scroll adjustment
      link.addEventListener('click', (e) => {
        e.preventDefault();
        history.pushState(null, null, `#${heading.id}`);
        adjustScrollForHeaderHeight();
      });

      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Generate Table of Contents from headings
   * @param {number} maxLevel - Maximum heading level to include (default: 6)
   */
  function generateTableOfContents(maxLevel = 6) {
    const tocContent = document.getElementById('toc-content');
    if (!tocContent) return;

    // Convert maxLevel to the corresponding h-tag number (e.g., maxLevel 2 means include h2, h3, h4)
    const maxHLevel = Math.min(Math.max(2, maxLevel + 2), 6);

    // Create a selector that only includes headings up to the specified level
    const headingSelector = Array.from({ length: maxHLevel - 1 }, (_, i) => `h${i + 2}`).join(', ');

    const headings = Array.from(document.querySelectorAll(headingSelector));
    if (headings.length === 0) {
      const toc = document.getElementById('toc');
      if (toc) {
        toc.style.display = 'none';
      }
      return;
    }

    // Clear existing content
    tocContent.innerHTML = '';

    // Create TOC items
    headings.forEach((heading) => {
      if (!heading.id) return;

      const level = parseInt(heading.tagName.substring(1)) - 2; // h2 = level 0, h3 = level 1, etc.
      const tocItem = document.createElement('a');
      tocItem.href = `#${heading.id}`;

      // Prevent default behavior and use our custom scroll adjustment
      tocItem.addEventListener('click', (e) => {
        e.preventDefault();
        history.pushState(null, null, `#${heading.id}`);
        adjustScrollForHeaderHeight();
      });

      // Apply different indentation based on heading level
      let indentClass = '';
      if (level === 0) {
        indentClass = 'font-medium';
      } else if (level === 1) {
        indentClass = 'ml-3';
      } else if (level === 2) {
        indentClass = 'ml-6';
      } else if (level >= 3) {
        indentClass = 'ml-9';
      }

      tocItem.className = `block py-1 text-gray-700 hover:text-blue-600 transition-colors duration-200 ${indentClass}`;

      // Remove the # symbol from the heading text if it exists
      tocItem.textContent = heading.textContent.replace(/#\s*$/, '').trim();

      // Add active state tracking
      tocItem.dataset.target = heading.id;

      tocContent.appendChild(tocItem);
    });

    // Apply responsive display after generating content
    handleResponsiveDisplay();
  }

  /** Highlight active TOC item based on scroll position */
  function updateActiveTocItem() {
    // Use the same heading selector as in generateTableOfContents
    const maxHLevel = Math.min(Math.max(2, TOC_CONFIG.maxLevel + 2), 6);
    const headingSelector = Array.from({ length: maxHLevel - 1 }, (_, i) => `h${i + 2}`).join(', ');

    const headings = Array.from(document.querySelectorAll(headingSelector));
    if (headings.length === 0) return;

    // Get current scroll position with some offset
    const scrollPosition = window.scrollY + 100;

    // Find the current heading
    let currentHeadingId = '';
    for (const heading of headings) {
      if (heading.offsetTop <= scrollPosition) {
        currentHeadingId = heading.id;
      } else {
        break;
      }
    }

    // Update active class on TOC items
    const tocItems = document.querySelectorAll('#toc-content a');
    tocItems.forEach((item) => {
      if (item.dataset.target === currentHeadingId) {
        item.classList.add('font-medium', 'text-blue-600', 'border-l-2', 'border-blue-600', 'pl-2');
      } else {
        item.classList.remove('font-medium', 'text-blue-600', 'border-l-2', 'border-blue-600', 'pl-2');
      }
    });
  }

  // Add a resize listener to handle responsive behavior
  function handleResponsiveDisplay() {
    const toc = document.getElementById('toc');
    if (!toc) return;

    // Check if we're on mobile or medium screens
    if (window.innerWidth < 1340) {
      // 1340px is the xl breakpoint in Tailwind
      // On mobile and medium screens, ensure it's completely hidden
      toc.style.display = 'none';
    } else {
      // Only on large screens, make it visible
      toc.style.display = 'block';
    }
  }

  // Call on resize
  window.addEventListener('resize', handleResponsiveDisplay);

  // Configuration for TOC
  const TOC_CONFIG = {
    // Read maxLevel from data attribute or default to 4
    get maxLevel() {
      const toc = document.getElementById('toc');
      if (toc && toc.dataset.maxLevel) {
        return parseInt(toc.dataset.maxLevel, 10);
      }
      return 4; // Default to h4
    },
  };

  // Call once on load
  document.addEventListener('DOMContentLoaded', () => {
    generateTableOfContents(TOC_CONFIG.maxLevel);
    updateActiveTocItem();
    handleResponsiveDisplay();
    adjustScrollForHeaderHeight();
  });

  // Also run it immediately if DOM is already loaded
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
    generateTableOfContents(TOC_CONFIG.maxLevel);
    handleResponsiveDisplay();
    adjustScrollForHeaderHeight();
  }

  // Update active TOC item on scroll
  document.addEventListener('scroll', updateActiveTocItem);

  /** Adjusts scroll position when navigating to a hash fragment
   *  to account for the fixed header height */
  function adjustScrollForHeaderHeight() {
    // Check if URL has a hash fragment
    if (window.location.hash) {
      // Get the target element
      const targetId = window.location.hash.substring(1);
      const targetElement = document.getElementById(targetId);

      if (targetElement) {
        // Wait a bit for the page to fully render
        setTimeout(() => {
          // Get the header height from the DOM
          const headerElement = document.querySelector('div.h-20.fixed.top-0');
          const headerHeight = headerElement ? headerElement.offsetHeight : 80; // Default to 80px if not found

          // Calculate the adjusted scroll position
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.scrollY - headerHeight - 20; // Extra 20px padding

          // Scroll to the adjusted position
          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth',
          });
        }, 100);
      }
    }
  }

  // Add event listener for hash changes (when clicking on TOC links or heading links)
  window.addEventListener('hashchange', adjustScrollForHeaderHeight);

  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement('div');
    progressContainer.className = 'fixed top-0 left-0 z-50 h-1 w-full bg-gray-200';

    // Create the progress bar div
    const progressBar = document.createElement('div');
    progressBar.className = 'h-1 w-0 bg-blue-500';
    progressBar.id = 'myBar';

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the scroll progress bar when user scrolls */
  function updateScrollProgress() {
    const winScroll = document.body.scrollTop || document.documentElement.scrollTop;
    const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    const myBar = document.getElementById('myBar');
    if (myBar) {
      myBar.style.width = scrolled + '%';
    }
  }
  document.addEventListener('scroll', updateScrollProgress);

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector('#back-to-top')?.addEventListener('click', () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  /** Add language labels and copy buttons to code blocks */
  function enhanceCodeBlocks() {
    const codeBlocks = document.querySelectorAll('pre');

    codeBlocks.forEach((pre) => {
      // Create container for the code block with relative positioning
      const container = document.createElement('div');
      container.className = 'relative group';
      pre.parentNode.insertBefore(container, pre);
      container.appendChild(pre);

      // Get the code element and its language
      const code = pre.querySelector('code');
      if (!code) return;

      // Get language from pre.dataset.language
      let language = pre.dataset.language || 'text';

      // Add language label
      const languageLabel = document.createElement('div');
      languageLabel.className =
        'dark absolute top-0 right-0 text-muted text-xs m-2 p-2 rounded-sm group-hover:opacity-0 transition-opacity';
      languageLabel.textContent = language;
      container.appendChild(languageLabel);

      // Add copy button
      const copyButton = document.createElement('button');
      copyButton.className =
        'dark absolute top-0 right-0 m-1 p-2 text-muted text-xs rounded-sm opacity-0 group-hover:opacity-100 transition-all duration-300 ease-in-out hover:cursor-pointer border border-transparent hover:border-muted';

      // Use Tabler icon for copy
      copyButton.innerHTML = `
        <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-copy"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z" /><path d="M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1" /></svg>
      `;
      copyButton.title = 'Copy code';
      container.appendChild(copyButton);

      // Add click event to copy button
      copyButton.addEventListener('click', () => {
        const codeText = code.textContent;
        const checkmarkIcon = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon icon-tabler icons-tabler-outline icon-tabler-check"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l5 5l10 -10" /></svg>
        `;
        const originalContent = copyButton.innerHTML;

        // Check if Clipboard API is available
        if (navigator && navigator.clipboard && navigator.clipboard.writeText) {
          navigator.clipboard
            .writeText(codeText)
            .then(() => {
              // Show checkmark icon with transition
              copyButton.innerHTML = checkmarkIcon;

              // Reset after 2 seconds
              setTimeout(() => {
                copyButton.innerHTML = originalContent;
              }, 2000);
            })
            .catch((err) => {
              console.error('Failed to copy code: ', err);
              fallbackCopyTextToClipboard(codeText, copyButton, checkmarkIcon, originalContent);
            });
        } else {
          // Fallback for browsers that don't support clipboard API
          fallbackCopyTextToClipboard(codeText, copyButton, checkmarkIcon, originalContent);
        }
      });
    });
  }

  /**
   * Fallback method to copy text to clipboard using a temporary textarea element
   */
  function fallbackCopyTextToClipboard(text, button, checkmarkIcon, originalContent) {
    const textArea = document.createElement('textarea');
    textArea.value = text;

    // Make the textarea out of viewport
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);

    textArea.focus();
    textArea.select();

    let successful = false;
    try {
      successful = document.execCommand('copy');
    } catch (err) {
      console.error('Fallback: Oops, unable to copy', err);
    }

    document.body.removeChild(textArea);

    // Update button with checkmark or error indication
    if (button) {
      if (successful) {
        button.innerHTML = checkmarkIcon;
      } else {
        button.innerHTML = `<span>Failed!</span>`;
      }

      // Reset after 2 seconds
      setTimeout(() => {
        button.innerHTML = originalContent;
      }, 2000);
    }
  }

  // Run the code block enhancement after the page loads
  document.addEventListener('DOMContentLoaded', enhanceCodeBlocks);
  // Also run it immediately in case the DOM is already loaded
  if (document.readyState === 'interactive' || document.readyState === 'complete') {
    enhanceCodeBlocks();
    generateTableOfContents();
    handleResponsiveDisplay();
  }
</script>
